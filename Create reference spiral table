import numpy as np
import matplotlib.pyplot as plt

# Producing the prime distribution figure

numberOfSpirals = 10
matrixDim = 2*numberOfSpirals + 1

spiralMatrix = np.zeros((matrixDim, matrixDim), dtype=int)
matrixValues = np.arange(matrixDim**2) + 1

def primeCheck(number):
    if number == 1:
        return False
    else:
        i = 2
        while i <= np.sqrt(number):
            if number % i == 0:
                return False
            i +=1
        return True

    
prevPosition = (matrixDim-1, matrixDim)
writeDirection = (0, -1)
for num in matrixValues:
    writePosition = (prevPosition[0] + writeDirection[0], prevPosition[1] + writeDirection[1])
    #print(str(num) + "  " + str(writePosition))
    spiralMatrix[writePosition[0]][writePosition[1]] = matrixDim**2 - num + 1
    nextPos = (writePosition[0] + writeDirection[0], writePosition[1] + writeDirection[1])
    nextPosInBounds = (0 <= nextPos[0] < matrixDim) and (0 <= nextPos[1] < matrixDim)
    validNextPos = nextPosInBounds and (spiralMatrix[nextPos[0]][nextPos[1]] == 0)
    prevPosition = writePosition
    if not validNextPos:
        if writeDirection == (0, -1):
            writeDirection = (-1, 0)
        elif writeDirection == (-1, 0):
            writeDirection = (0, 1)
        elif writeDirection == (0, 1):
            writeDirection = (1, 0)
        else:
            writeDirection = (0, -1)

plt.figure(figsize=(12,9))
table = plt.table(spiralMatrix, loc='center')
table.scale(1,3)
table.auto_set_font_size(False)
table.set_fontsize(12)
cells = table.get_celld()
for i in range(0, matrixDim):
    for j in range(0, matrixDim):
        cell = cells[(i,j)]
        cellValue = spiralMatrix[i, j]
        if primeCheck(cellValue):
            cell.set_facecolor('palegreen')

plt.axis('off')
plt.show()
